/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface ModelInterfaceInterface extends ethers.utils.Interface {
  functions: {
    "invest()": FunctionFragment;
    "underlyingBalanceInModel()": FunctionFragment;
    "underlyingBalanceWithInvestment()": FunctionFragment;
    "withdrawAllToForge()": FunctionFragment;
    "withdrawTo(uint256,address)": FunctionFragment;
    "withdrawToForge(uint256)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "invest", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "underlyingBalanceInModel",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "underlyingBalanceWithInvestment",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawAllToForge",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawTo",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawToForge",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "invest", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "underlyingBalanceInModel",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "underlyingBalanceWithInvestment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawAllToForge",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdrawTo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawToForge",
    data: BytesLike
  ): Result;

  events: {
    "Invest(uint256,uint256)": EventFragment;
    "Withdraw(uint256,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Invest"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Withdraw"): EventFragment;
}

export class ModelInterface extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: ModelInterfaceInterface;

  functions: {
    invest(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    underlyingBalanceInModel(overrides?: CallOverrides): Promise<[BigNumber]>;

    underlyingBalanceWithInvestment(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    withdrawAllToForge(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawTo(
      amount: BigNumberish,
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawToForge(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  invest(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  underlyingBalanceInModel(overrides?: CallOverrides): Promise<BigNumber>;

  underlyingBalanceWithInvestment(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  withdrawAllToForge(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawTo(
    amount: BigNumberish,
    to: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawToForge(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    invest(overrides?: CallOverrides): Promise<void>;

    underlyingBalanceInModel(overrides?: CallOverrides): Promise<BigNumber>;

    underlyingBalanceWithInvestment(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdrawAllToForge(overrides?: CallOverrides): Promise<void>;

    withdrawTo(
      amount: BigNumberish,
      to: string,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawToForge(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    Invest(
      amount?: null,
      timestamp?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { amount: BigNumber; timestamp: BigNumber }
    >;

    Withdraw(
      amount?: null,
      to?: null,
      timestamp?: null
    ): TypedEventFilter<
      [BigNumber, string, BigNumber],
      { amount: BigNumber; to: string; timestamp: BigNumber }
    >;
  };

  estimateGas: {
    invest(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    underlyingBalanceInModel(overrides?: CallOverrides): Promise<BigNumber>;

    underlyingBalanceWithInvestment(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdrawAllToForge(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawTo(
      amount: BigNumberish,
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawToForge(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    invest(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    underlyingBalanceInModel(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    underlyingBalanceWithInvestment(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    withdrawAllToForge(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawTo(
      amount: BigNumberish,
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawToForge(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
